@model IEnumerable<EmsWebApplication.Models.Ticket>
@using System.Text.Json;

@{
    ViewBag.Title = "Index";
    List<int> shoppingCart = new List<int>(); // Initialize an empty shopping cart

    // Serialize shoppingCart on the server side
    var cartJson = System.Text.Json.JsonSerializer.Serialize(shoppingCart);
    ViewBag.CartJson = cartJson;
}

<h2>Buy Your Ticket Now!</h2>

<canvas id="TicketsBackground"></canvas>

@foreach (var item in Model)
{
    <div class="ticket">
        <h3>@item.Event.EventName</h3>
        <p><strong>Date:</strong> @item.Event.EventDate</p>
        <p><strong>Venue:</strong> @item.Event.EventVenue</p>
        <p><strong>Description:</strong> @item.Event.EventDescription</p>
        <p><strong>Price:</strong> $<span class="event-price" data-event-price="@item.Event.EventPrice">@item.Event.EventPrice</span></p>

        <!-- Button to add one ticket to the cart -->
        <button class="addToCartButton" data-ticket-id="@item.TicketId" data-event-name="@item.Event.EventName" data-event-price="@item.Event.EventPrice" data-quantity="1">Add to Cart</button>
    </div>
}

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<!-- Button to open the shopping cart modal -->
<button id="viewCartButton" class="btn btn-primary">View Cart</button>

<!-- Shopping Cart Modal -->
<div class="modal" id="shoppingCartModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Shopping Cart</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="cart-container">
                    <ul class="cart-items" id="cartItemsList">
                    </ul>
                </div>
                <div class="cart-summary">
                    <div class="total-price">
                        <span class="total-label">Total Price:</span>
                        <span class="total-amount" id="cartTotalPrice">$0.00</span>
                    </div>
                    <button type="button" id="updateCartButton" class="btn btn-primary update-cart-button">Update Cart</button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="checkoutButton">Checkout</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Load the cart from session storage, or initialize an empty cart
        var cart = JSON.parse(sessionStorage.getItem('cart')) || [];
        var cartTotalPrice = 0;

        // Function to update the cart item quantity and recalculate item prices in real-time
        $(document).on("change", ".cart-item-quantity", function () {
            var ticketId = $(this).data("ticket-id");
            var newQuantity = parseInt($(this).val());

            // Update the cart with the new quantity
            for (var i = 0; i < cart.length; i++) {
                if (cart[i].ticketId === ticketId) {
                    cart[i].quantity = newQuantity;
                }
            }

            // Update the displayed total price in real-time
            cartTotalPrice = calculateTotalPrice(cart);
            $("#cartTotalPrice").text(cartTotalPrice.toFixed(2));

            // Store the updated cart in session storage
            sessionStorage.setItem('cart', JSON.stringify(cart));
        });

        function calculateTotalPrice(cart) {
            var total = 0;
            for (var i = 0; i < cart.length; i++) {
                var ticketId = cart[i].ticketId;
                var eventPrice = $("button[data-ticket-id=" + ticketId + "]").data("event-price");
                var quantity = cart[i].quantity;
                total += eventPrice * quantity;
            }
            return total;
        }

        function updateCartUI() {
            var cartItemsList = $("#cartItemsList");
            cartItemsList.empty();

            for (var i = 0; i < cart.length; i++) {
                var cartItem = cart[i];
                var ticketId = cartItem.ticketId;
                var eventName = $("button[data-ticket-id=" + ticketId + "]").data("event-name");
                var eventPrice = $("button[data-ticket-id=" + ticketId + "]").data("event-price");
                var quantity = cartItem.quantity;

                var listItem = $("<li class='cart-item'>Event: " + eventName + ", Price: $" + (eventPrice * quantity).toFixed(2) +
                    " <input type='number' class='cart-item-quantity' data-ticket-id='" + ticketId + "' value='" + quantity + "' min='1'>" +
                    " <button class='removeFromCartButton' data-ticket-id='" + ticketId + "'>Remove</button></li>");
                cartItemsList.append(listItem);
            }
        }

        // Function to remove an item from the cart
        function removeCartItem(ticketId) {
            cart = cart.filter(function (item) {
                return item.ticketId !== ticketId;
            });
            updateCartUI();

            // Update the displayed total price when removing an item
            cartTotalPrice = calculateTotalPrice(cart);
            $("#cartTotalPrice").text(cartTotalPrice.toFixed(2));

            // Store the updated cart in session storage
            sessionStorage.setItem('cart', JSON.stringify(cart));
        }

        // Click event for "Add to Cart" buttons
        $(".addToCartButton").click(function () {
            var ticketId = $(this).data("ticket-id");
            var existingCartItem = cart.find(function (item) {
                return item.ticketId === ticketId;
            });

            if (existingCartItem) {
                existingCartItem.quantity += 1;
            } else {
                cart.push({
                    ticketId: ticketId,
                    quantity: 1
                });
            }

            // Update the UI
            updateCartUI();

            alert("Ticket ID " + ticketId + " added to cart.");

            // Update the displayed total price when adding an item
            cartTotalPrice = calculateTotalPrice(cart);
            $("#cartTotalPrice").text(cartTotalPrice.toFixed(2));

            // Store the updated cart in session storage
            sessionStorage.setItem('cart', JSON.stringify(cart));
        });

        // Click event for "Remove" buttons in the cart
        $(document).on("click", ".removeFromCartButton", function () {
            var ticketId = $(this).data("ticket-id");
            removeCartItem(ticketId);
        });
        // Function to handle the checkout process
        function checkout() {
            if (cart.length === 0) {
                // Check if the cart is empty and inform the user
                alert("Your cart is empty. Please add items to your cart before checking out.");
            } else {
                // Your checkout logic here
                // You can implement the checkout process, redirect the user to a checkout page, or show a confirmation message.
                alert("Checkout process initiated. Thank you for your order!");
                // Redirect the user to the checkout page
                window.location.href = "/Tickets/Checkout"; // Replace with the actual URL of your checkout page
            }
        }

        // Click event for the "Checkout" button
        $("#checkoutButton").click(function () {
            checkout();
        });


        // Click event to open the shopping cart modal
        $("#viewCartButton").click(function () {
            updateCartUI();
            $("#shoppingCartModal").modal("show");
        });

        // Click event to close the shopping cart modal
        $(".close").click(function () {
            $("#shoppingCartModal").modal("hide");
        });
    });
</script>

<style>

    * {
        font-family: Courier New, Courier, monospace;
    }

    .addToCartButton {
        border-color: dimgrey;
        border-radius: 12px;
        color: black;
    }

        .addToCartButton:hover {
            background-color: dimgray;
            color: white;
        }

    .ticket {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px;
        border-radius: 12px;
        background-color: aliceblue;
        opacity: 0.6;
    }

        .ticket:hover {
            transform: scale(1.1);
            opacity: 0.8;
            box-shadow: 0 0 20px rgb(111, 255, 23);
        }

    a {
        text-decoration: none;
        color: white;
    }

    canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url("https://cdn.wallpapersafari.com/41/48/0xSLbK.jpg");
        background-repeat: no-repeat;
        background-position-y: 100%;
        background-position: center;
        background-size: cover;
        z-index: -1;
    }

    .modal-content {
        border-radius: 0;
    }

    .modal-title {
        font-size: 24px;
    }

    .modal-header {
        background-color: #007BFF;
        color: #fff;
    }

    .modal-body {
        padding: 15px;
    }

    .cart-container {
        max-height: 300px;
        overflow-y: auto;
    }

    .cart-items {
        list-style: none;
        padding: 0;
    }

    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        border-bottom: 1px solid #ddd;
        padding: 5px 0;
    }

        .cart-item:last-child {
            border-bottom: none;
        }

    .cart-item-quantity {
        width: 50px;
    }

    .cart-summary {
        margin-top: 15px;
        border-top: 1px solid #ddd;
        padding-top: 10px;
    }

    .total-label {
        font-weight: bold;
    }

    .total-amount {
        font-weight: bold;
        font-size: 18px;
    }

    .update-cart-button {
        margin-top: 10px;
    }

    .modal-footer {
        justify-content: space-between;
    }
</style>